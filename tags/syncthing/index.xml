



<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<?xml-stylesheet type="text/xsl" href="#stylesheet" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <xsl:stylesheet id="stylesheet" version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" exclude-result-prefixes="xsl">
    <xsl:output method="html" doctype-system="about:legacy-compat" />
    <xsl:template match="/rss">
      <html lang="">
        <head>
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>syncthing RSS | &lt;-</title>
          <link rel="stylesheet" href="//puhoy.github.io/css/base.min.e24230f1f5eed9386729595ee5b1ddc4bc51f07d4d622d31d1f616d9ec32d451.css" integrity="sha256-4kIw8fXu2ThnKVle5bHdxLxR8H1NYi0x0fYW2ewy1FE=" />
        </head>
        <body>
          <nav class="u-background">
  <div class="u-wrapper">
    <ul class="Banner">
      <li class="Banner-item Banner-item--title">
        <a class="Banner-link u-clickable" href="//puhoy.github.io">&lt;-</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="//puhoy.github.io/about/">about</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="//puhoy.github.io/posts/">posts</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="//puhoy.github.io/tags/">tags</a>
      </li>
      
      <li class="Banner-item">
        <a class="Banner-link u-clickable" href="//puhoy.github.io/index.xml">rss</a>
      </li>
      
    </ul>
  </div>
</nav>
          <main>
            <div class="u-wrapper">
              <div class="u-padding">
                <h2 class="Heading-title">
                  
                  <a class="Heading-link u-clickable" href="//puhoy.github.io/tags/syncthing/index.xml" rel="bookmark">syncthing RSS</a>
                  
                </h2>
                
                <p>
                  To subscribe to this RSS feed, copy its address and paste it into your favorite feed reader.
                </p>
                
              </div>
            </div>
          </main>
          
<footer class="Footer">
  <div class="u-wrapper">
    <div class="u-padding">
      Except where otherwise noted, content on this site is licensed under a <a href="http://creativecommons.org/licenses/by/4.0/" rel="license"> Creative Commons Attribution 4.0 International License</a>.
    </div>
  </div>
</footer>

        </body>
      </html>
    </xsl:template>
  </xsl:stylesheet>
  <channel>
    <title>syncthing on &lt;-</title>
    <link>//puhoy.github.io/tags/syncthing/</link>
    <description>Recent content in syncthing on &lt;-</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 03 Aug 2019 18:47:54 +0200</lastBuildDate>
    <atom:link href="//puhoy.github.io/tags/syncthing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>compiling syncthing protocol buffers for python</title>
      <link>//puhoy.github.io/posts/syncthing_protocol_buffers/</link>
      <pubDate>Sat, 03 Aug 2019 18:47:54 +0200</pubDate>
      <guid>//puhoy.github.io/posts/syncthing_protocol_buffers/</guid>
      <description>

&lt;p&gt;turns out, hacking something in python to play with syncthing is not too hard,
since they used &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;protocol buffers&lt;/a&gt; to define their protocols for local discovery and block exchange!&lt;/p&gt;

&lt;p&gt;that means, we can just generate code to parse the packets! :)&lt;/p&gt;

&lt;h3 id=&#34;install-protobuf-package&#34;&gt;install protobuf package&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;pacman -S protobuf  # depending on your distro&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;clone-syncthing-requirements&#34;&gt;clone syncthing &amp;amp; requirements&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;git clone https://github.com/syncthing/syncthing.git
cd syncthing
git clone https://github.com/gogo/protobuf.git repos/protobuf&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;generate-protobuf&#34;&gt;generate protobuf&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;# in a new folder, somewhere else
protoc --proto_path PATH/TO/SYNCTHING --python_out=. repos/protobuf/gogoproto/gogo.proto lib/protocol/bep.proto lib/discover/local.proto&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this generates generates a &lt;code&gt;lib/&lt;/code&gt; folder, containing our code.&lt;/p&gt;

&lt;h2 id=&#34;example-reading-local-discovery-announcement-or-the-hello-world-of-the-syncthing-protocol&#34;&gt;example: reading local discovery announcement (or: the hello world of the syncthing protocol)&lt;/h2&gt;

&lt;p&gt;the exact specifications for the local discover are &lt;a href=&#34;https://docs.syncthing.net/specs/localdisco-v4.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;in short, this says:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;packets will be broadcasted to port 21027, UDP.&lt;/li&gt;
&lt;li&gt;a packet starts with a 32bit magic field, containing 0x2EA7D90B in big endian.
that means, if a packet starts with this value, its one of our announcement packets!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the code to create a socket, wait for a packet and read it would look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; socket

&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; lib.discover &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; local_pb2  &lt;span style=&#34;color:#6272a4&#34;&gt;# the stuff that was generated for us! :)&lt;/span&gt;

HOST &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;# listen on all interfaces&lt;/span&gt;
PORT &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;21027&lt;/span&gt;
DISCOVERY_MAGIC &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0x2EA7D90B&lt;/span&gt;

&lt;span style=&#34;color:#6272a4&#34;&gt;# open a datagram socket (==udp)&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# since python3.2, sockets support contexts, so we use a context manager here&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;with&lt;/span&gt; socket&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;socket(socket&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AF_INET, socket&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SOCK_DGRAM) &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt; s:  
    s&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;bind((HOST, PORT))
    
    &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; True:
        data, addr &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;recvfrom(&lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt;)
        
        magic &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;from_bytes(data[:&lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;], byteorder&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;big&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#6272a4&#34;&gt;# read the magic value&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; magic &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; DISCOVERY_MAGIC:
            packet_data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;:]  &lt;span style=&#34;color:#6272a4&#34;&gt;# cut off the magic&lt;/span&gt;
            
            announce &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; local_pb2&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Announce()
            announce&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ParseFromString(packet_data)  &lt;span style=&#34;color:#6272a4&#34;&gt;# parse the packet data&lt;/span&gt;
            
            &lt;span style=&#34;color:#ff79c6&#34;&gt;print&lt;/span&gt;(announce)  &lt;span style=&#34;color:#6272a4&#34;&gt;# aaand were done!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;if there is a local instance of syncthing running in your network, you should get a packet every 30-60 seconds when you run this.&lt;/p&gt;

&lt;p&gt;the packet that you receive will have&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a random instance id (generated at startup),&lt;/li&gt;
&lt;li&gt;a list of addresses where the instance can be found,&lt;/li&gt;
&lt;li&gt;and the syncthing id, which is the key id of the SHA-256 certificate of this installation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;more&#34;&gt;more..&lt;/h2&gt;

&lt;p&gt;i guess just reading the local announcements is pretty useless, so if you want to continue on this,
you want to read the &lt;a href=&#34;https://docs.syncthing.net/specs/&#34;&gt;protocol specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;also, you need to generate (or read) rsa keys (&lt;a href=&#34;https://docs.syncthing.net/dev/device-ids.html#device-ids&#34;&gt;-&amp;gt;&lt;/a&gt;),
make the whole thing non-blocking (maybe by using threads or coroutines),
need to understand the way more complex &lt;a href=&#34;https://docs.syncthing.net/specs/bep-v1.html&#34;&gt;block exchange protocol&lt;/a&gt;,
communicate between the socket threads you set up and (most likely) a lot more things.&lt;/p&gt;

&lt;p&gt;i still find it interesting, so there are probably more posts coming on this. :)&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>